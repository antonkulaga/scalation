
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 1.0
 *  @date    Wed Jun  6 15:08:14 EDT 2012
 *  @see     LICENSE (MIT style license file).
 *  @compile scalac -cp ../../classes -d classes ParMatrixTest.scala
 *           scalac -cp ../../classes -d classes -optimize ParMatrixTest.scala
 *  @run     scala -cp ../../classes:classes analytics.ParMatrixTest
 */

package analytics

import scalation._
import scalation.random.Uniform

object ParMatrixTest extends App
{
    val n   = 1000
    val rep = 10 
    val ran = Uniform (0., n)
    var t0  = 0l
    var dt  = 0l
    var r   = 0.

    val x = new math.Vectors.VectorD (n)
    val a = new math.Matrices.MatrixD (n, n)
    val b = new math.Matrices.MatrixD (n, n)
    val y = new parmath.Vectors.VectorD (n)
    val c = new parmath.Matrices.MatrixD (n, n)
    val d = new parmath.Matrices.MatrixD (n, n)
    for (i <- 0 until n) {
        r = ran.gen; x(i) = r; y(i) = r 
        for (j <- 0 until n) {
            r = ran.gen; a(i, j) = r; c(i, j) = r
            r = ran.gen; b(i, j) = r; d(i, j) = r
        } // for
    } // for

    println ("Test matrix-vector multiplication ------------------------------")

    for (i <- 0 until rep) {
        t0  = System.nanoTime
        val res = a * x
        dt  = System.nanoTime - t0
        println ("Result = " + res.sum + "\tElapsed time (ser) = " + dt + " ns")
    } // for

    for (i <- 0 until rep) {
        t0  = System.nanoTime
        val res = c * y
        dt  = System.nanoTime - t0
        println ("Result = " + res.sum + "\tElapsed time (par) = " + dt + " ns")
    } // for

    println ("Test matrix multiplication -------------------------------------")

    for (i <- 0 until rep) {
        t0  = System.nanoTime
        val prd = a * b
        dt  = System.nanoTime - t0
        println ("Result = " + (prd * x).sum + "\tElapsed time (ser) = " + dt + " ns")
    } // for

    for (i <- 0 until rep) {
        t0  = System.nanoTime
        val prd = c * d
        dt  = System.nanoTime - t0
        println ("Result = " + (prd * y).sum + "\tElapsed time (par) = " + dt + " ns")
    } // for

    println ("Test LU Decomposition ------------------------------------")

} // ParMatrixTest

